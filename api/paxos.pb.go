// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/paxos.proto

package api

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7d8104a7079723, []int{0}
}
func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMessage.Unmarshal(m, b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
}
func (m *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(m, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return xxx_messageInfo_EmptyMessage.Size(m)
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

type Value struct {
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7d8104a7079723, []int{1}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Request struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Attempt              uint32   `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7d8104a7079723, []int{2}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

type Proposal struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7d8104a7079723, []int{3}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proposal.Unmarshal(m, b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return xxx_messageInfo_Proposal.Size(m)
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Proposal) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Promise struct {
	Id                   uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Accepted             *Proposal `protobuf:"bytes,5,opt,name=accepted,proto3" json:"accepted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Promise) Reset()         { *m = Promise{} }
func (m *Promise) String() string { return proto.CompactTextString(m) }
func (*Promise) ProtoMessage()    {}
func (*Promise) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7d8104a7079723, []int{4}
}
func (m *Promise) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Promise.Unmarshal(m, b)
}
func (m *Promise) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Promise.Marshal(b, m, deterministic)
}
func (m *Promise) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Promise.Merge(m, src)
}
func (m *Promise) XXX_Size() int {
	return xxx_messageInfo_Promise.Size(m)
}
func (m *Promise) XXX_DiscardUnknown() {
	xxx_messageInfo_Promise.DiscardUnknown(m)
}

var xxx_messageInfo_Promise proto.InternalMessageInfo

func (m *Promise) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Promise) GetAccepted() *Proposal {
	if m != nil {
		return m.Accepted
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "mjpitz.paxos.EmptyMessage")
	proto.RegisterType((*Value)(nil), "mjpitz.paxos.Value")
	proto.RegisterType((*Request)(nil), "mjpitz.paxos.Request")
	proto.RegisterType((*Proposal)(nil), "mjpitz.paxos.Proposal")
	proto.RegisterType((*Promise)(nil), "mjpitz.paxos.Promise")
}

func init() { proto.RegisterFile("api/paxos.proto", fileDescriptor_1b7d8104a7079723) }

var fileDescriptor_1b7d8104a7079723 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xd9, 0xf2, 0xf6, 0x0f, 0xf3, 0xc6, 0x0a, 0xab, 0x95, 0x10, 0x29, 0x84, 0x9c, 0x72,
	0x4a, 0x4a, 0x7a, 0x50, 0xbc, 0x29, 0xe8, 0xad, 0x58, 0x72, 0xf0, 0xe0, 0x6d, 0x93, 0x0c, 0x75,
	0xa5, 0x61, 0xd7, 0xdd, 0x4d, 0x51, 0xbf, 0x99, 0xdf, 0x4e, 0xb2, 0x31, 0xd2, 0x10, 0x73, 0x9b,
	0x19, 0xe6, 0xf7, 0xcc, 0x33, 0xc3, 0xc0, 0x29, 0x93, 0x3c, 0x96, 0xec, 0x5d, 0xe8, 0x48, 0x2a,
	0x61, 0x04, 0x75, 0xca, 0x57, 0xc9, 0xcd, 0x67, 0x64, 0x6b, 0xc1, 0x1c, 0x9c, 0xfb, 0x52, 0x9a,
	0x8f, 0x0d, 0x6a, 0xcd, 0x76, 0x18, 0x2c, 0x61, 0xfc, 0xc4, 0xf6, 0x15, 0xd2, 0x73, 0x18, 0x1f,
	0xea, 0xc0, 0x1d, 0xfb, 0x24, 0x74, 0xd2, 0x26, 0x09, 0xd6, 0x30, 0x4d, 0xf1, 0xad, 0x42, 0x6d,
	0xe8, 0x1c, 0x46, 0xbc, 0x70, 0x89, 0x4f, 0xc2, 0x7f, 0xe9, 0x88, 0x17, 0xd4, 0x85, 0x29, 0x33,
	0x06, 0x4b, 0x69, 0xdc, 0x91, 0x4f, 0xc2, 0x93, 0xb4, 0x4d, 0x83, 0x15, 0xcc, 0xb6, 0x4a, 0x48,
	0xa1, 0xd9, 0xbe, 0x47, 0xfd, 0x3d, 0x66, 0x03, 0xd3, 0xad, 0x12, 0x25, 0xd7, 0xd8, 0x03, 0x12,
	0x98, 0xb1, 0x3c, 0x47, 0x69, 0xb0, 0xb0, 0xcc, 0xff, 0xe4, 0x22, 0x3a, 0xde, 0x28, 0x6a, 0x47,
	0xa5, 0xbf, 0x7d, 0xc9, 0x43, 0x6b, 0x00, 0x15, 0xbd, 0xb1, 0xd2, 0x75, 0x4c, 0xcf, 0xba, 0xa0,
	0xdd, 0xdb, 0xf3, 0xba, 0xc5, 0xe3, 0xe3, 0x24, 0x5f, 0x04, 0x66, 0xb7, 0x56, 0x54, 0x28, 0x7a,
	0x55, 0x0b, 0xa1, 0x64, 0x0a, 0xe9, 0xa2, 0xcb, 0xfc, 0x5c, 0xc8, 0x5b, 0xf4, 0x8c, 0xd9, 0x8d,
	0xae, 0x61, 0xd2, 0x88, 0xd0, 0x01, 0xe7, 0xde, 0x40, 0xbd, 0xf6, 0xfe, 0x98, 0x69, 0x54, 0x87,
	0xc1, 0x91, 0x03, 0xe4, 0x8a, 0xdc, 0x2d, 0x9f, 0x2f, 0x77, 0xdc, 0xbc, 0x54, 0x59, 0x94, 0x8b,
	0x32, 0x6e, 0xba, 0x9a, 0xbf, 0x88, 0x99, 0xe4, 0xd9, 0xc4, 0x3e, 0xc7, 0xfa, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x37, 0xf5, 0x30, 0xb8, 0x2f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProposerClient is the client API for Proposer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProposerClient interface {
	Propose(ctx context.Context, in *Value, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type proposerClient struct {
	cc *grpc.ClientConn
}

func NewProposerClient(cc *grpc.ClientConn) ProposerClient {
	return &proposerClient{cc}
}

func (c *proposerClient) Propose(ctx context.Context, in *Value, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/mjpitz.paxos.Proposer/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposerServer is the server API for Proposer service.
type ProposerServer interface {
	Propose(context.Context, *Value) (*EmptyMessage, error)
}

// UnimplementedProposerServer can be embedded to have forward compatible implementations.
type UnimplementedProposerServer struct {
}

func (*UnimplementedProposerServer) Propose(ctx context.Context, req *Value) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}

func RegisterProposerServer(s *grpc.Server, srv ProposerServer) {
	s.RegisterService(&_Proposer_serviceDesc, srv)
}

func _Proposer_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposerServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mjpitz.paxos.Proposer/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposerServer).Propose(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proposer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mjpitz.paxos.Proposer",
	HandlerType: (*ProposerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Proposer_Propose_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/paxos.proto",
}

// AcceptorClient is the client API for Acceptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AcceptorClient interface {
	Prepare(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Promise, error)
	Accept(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Proposal, error)
	Observe(ctx context.Context, in *Request, opts ...grpc.CallOption) (Acceptor_ObserveClient, error)
}

type acceptorClient struct {
	cc *grpc.ClientConn
}

func NewAcceptorClient(cc *grpc.ClientConn) AcceptorClient {
	return &acceptorClient{cc}
}

func (c *acceptorClient) Prepare(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Promise, error) {
	out := new(Promise)
	err := c.cc.Invoke(ctx, "/mjpitz.paxos.Acceptor/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acceptorClient) Accept(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Proposal, error) {
	out := new(Proposal)
	err := c.cc.Invoke(ctx, "/mjpitz.paxos.Acceptor/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acceptorClient) Observe(ctx context.Context, in *Request, opts ...grpc.CallOption) (Acceptor_ObserveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Acceptor_serviceDesc.Streams[0], "/mjpitz.paxos.Acceptor/Observe", opts...)
	if err != nil {
		return nil, err
	}
	x := &acceptorObserveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Acceptor_ObserveClient interface {
	Recv() (*Proposal, error)
	grpc.ClientStream
}

type acceptorObserveClient struct {
	grpc.ClientStream
}

func (x *acceptorObserveClient) Recv() (*Proposal, error) {
	m := new(Proposal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AcceptorServer is the server API for Acceptor service.
type AcceptorServer interface {
	Prepare(context.Context, *Request) (*Promise, error)
	Accept(context.Context, *Proposal) (*Proposal, error)
	Observe(*Request, Acceptor_ObserveServer) error
}

// UnimplementedAcceptorServer can be embedded to have forward compatible implementations.
type UnimplementedAcceptorServer struct {
}

func (*UnimplementedAcceptorServer) Prepare(ctx context.Context, req *Request) (*Promise, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedAcceptorServer) Accept(ctx context.Context, req *Proposal) (*Proposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (*UnimplementedAcceptorServer) Observe(req *Request, srv Acceptor_ObserveServer) error {
	return status.Errorf(codes.Unimplemented, "method Observe not implemented")
}

func RegisterAcceptorServer(s *grpc.Server, srv AcceptorServer) {
	s.RegisterService(&_Acceptor_serviceDesc, srv)
}

func _Acceptor_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcceptorServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mjpitz.paxos.Acceptor/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcceptorServer).Prepare(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acceptor_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcceptorServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mjpitz.paxos.Acceptor/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcceptorServer).Accept(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acceptor_Observe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AcceptorServer).Observe(m, &acceptorObserveServer{stream})
}

type Acceptor_ObserveServer interface {
	Send(*Proposal) error
	grpc.ServerStream
}

type acceptorObserveServer struct {
	grpc.ServerStream
}

func (x *acceptorObserveServer) Send(m *Proposal) error {
	return x.ServerStream.SendMsg(m)
}

var _Acceptor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mjpitz.paxos.Acceptor",
	HandlerType: (*AcceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Acceptor_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Acceptor_Accept_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Observe",
			Handler:       _Acceptor_Observe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/paxos.proto",
}
